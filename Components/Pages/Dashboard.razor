@page "/Dashboard"
@inject FineTrack.Services.BalanceService BalanceService
@inject FineTrack.Database.ApplicationDbContext DbContext

<style>
    .dashboard-card {
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin: 10px;
    }

    .chart-container {
    height: 250px;
    overflow-x: auto;
    }

    .chart-legend {
    display: flex;
    justify-content: space-around;
    margin-top: 10px;
    }

    .chart-legend-item {
    display: flex;
    align-items: center;
    font-size: 14px;
    white-space: nowrap;
    }

    .chart-legend-box {
    width: 16px;
    height: 16px;
    margin-right: 5px;
    }

    table {
    width: 100%;
    margin-top: 20px;
    border-collapse: collapse;
    }

    th, td {
    padding: 10px;
    text-align: left;
    border: 1px solid #ddd;
    }



    th {
    background-color: #f4f4f4;
    }

    .row {
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 20px;
    }

    .col-6 {
    flex: 0 0 50%;
    max-width: 50%;
    }

    .col-12 {
    flex: 0 0 100%;
    max-width: 100%;
    }
</style>

<div class="container mt-4">
    <div class="row">
        <!-- Row A: Cards -->
        <div class="col-6">
            <div class="row">
                <div class="col-3">
                    <div class="dashboard-card bg-success text-white text-center">
                        <h6>Available Balance</h6>
                        <h6>@BalanceService.AvailableBalance</h6>
                    </div>
                </div>
                <div class="col-3">
                    <div class="dashboard-card bg-success text-white text-center">
                        <h6>Total Inflows</h6>
                        <h6>@BalanceService.TotalInflows</h6>
                    </div>
                </div>
                <div class="col-3">
                    <div class="dashboard-card bg-danger text-white text-center">
                        <h6>Total Outflows</h6>
                        <h6>@BalanceService.TotalOutflows</h6>
                    </div>
                </div>
                <div class="col-3">
                    <div class="dashboard-card bg-warning text-white text-center">
                        <h6>Total Debt</h6>
                        <h6>@BalanceService.TotalDebt</h6>
                    </div>
                </div>
                <div class="col-3">
                    <div class="dashboard-card bg-danger text-white text-center">
                        <h6>Pending Debt</h6>
                        <h6>@BalanceService.TotalPendingDebt</h6>
                    </div>
                </div>
                <div class="col-3">
                    <div class="dashboard-card bg-success text-white text-center">
                        <h6>Cleared Debt</h6>
                        <h6>@BalanceService.TotalClearedDebt</h6>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="dashboard-card">
                <h5>Income vs Expense</h5>
                <div class="chart-container">
                    <MudPaper Class="pa-4">
                        <MudChart ChartType="ChartType.Bar"
                        ChartSeries="@BarChartSeries"
                        XAxisLabels="@BarChartLabels"
                        Width="100%"
                        Height="250px" />
                    </MudPaper>
                    <div class="chart-legend">
                        <div class="chart-legend-item">
                            <div class="chart-legend-box" style="background-color: green;"></div>
                            Income
                        </div>
                        <div class="chart-legend-item">
                            <div class="chart-legend-box" style="background-color: red;"></div>
                            Expense
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Row B: Bar Graph -->
    <div class="row">

    </div>

    <!-- Row C and D: Inflow and Outflow -->
    <div class="table-container">
        <div class="row">
            <h5>Highest Inflows</h5>
            @RenderTable(HighestInflows.Take(3).ToList())
        </div>
        <div class="row">
            <h5>Lowest Inflows</h5>
            @RenderTable(LowestInflows.Take(3).ToList())
        </div>
        <div class="row">
            <h5>Highest Outflows</h5>
            @RenderTable(HighestOutflows.Take(3).ToList())

        </div>
        <div class="row">
            <h5>Lowest Outflows</h5>
            @RenderTable(LowestOutflows.Take(3).ToList())
        </div>

        <!-- Row E and F: Debt -->
        <div class="row">
            <h5>Highest Debts</h5>
            @RenderTable(HighestDebts.Take(3).ToList())

        </div>
        <div class="row">
            <h5>Lowest Debts</h5>
            @RenderTable(LowestDebts.Take(3).ToList())
        </div>
    </div>

    <!-- Row G and H: Pending and Cleared Debts -->
    <div class="row"> 
            <h5>Pending Debt</h5>
            @RenderTable(PendingDebt.ToList())
            
    </div> 
    <div class="row">
        <h5>Cleared Debt</h5>
        @RenderTable(ClearedDebt.ToList())
    </div>
</div>

@code {
    private List<FineTrack.Database.Transaction> HighestInflows = new();
    private List<FineTrack.Database.Transaction> LowestInflows = new();
    private List<FineTrack.Database.Transaction> HighestOutflows = new();
    private List<FineTrack.Database.Transaction> LowestOutflows = new();
    private List<FineTrack.Database.Debt> HighestDebts = new();
    private List<FineTrack.Database.Debt> LowestDebts = new();
    private List<FineTrack.Database.Debt> PendingDebt = new();
    private List<FineTrack.Database.Debt> ClearedDebt = new();

    public List<ChartSeries> BarChartSeries = new List<ChartSeries>();
    public string[] BarChartLabels = { "Nov", "Dec", "Jan" }; // Example for three months

    protected override async Task OnInitializedAsync()
    {
        await BalanceService.UpdateAvailableBalanceAsync();
        await BalanceService.UpdateTransactionCategoriesAsync();

        var transactions = await DbContext.Transactions.ToListAsync();
        var debts = await DbContext.Debts.ToListAsync();

        HighestInflows = transactions.Where(t => t.TransactionType == "Income").OrderByDescending(t => t.TransactionAmount).Take(3).ToList();
        LowestInflows = transactions.Where(t => t.TransactionType == "Income").OrderBy(t => t.TransactionAmount).Take(3).ToList();

        HighestOutflows = transactions.Where(t => t.TransactionType == "Expense").OrderByDescending(t => t.TransactionAmount).Take(3).ToList();
        LowestOutflows = transactions.Where(t => t.TransactionType == "Expense").OrderBy(t => t.TransactionAmount).Take(3).ToList();

        HighestDebts = debts.OrderByDescending(d => d.DebtAmount).Take(3).ToList();
        LowestDebts = debts.OrderBy(d => d.DebtAmount).Take(3).ToList();

        PendingDebt = debts.Where(d => d.DebtStatus == "Pending").ToList();
        ClearedDebt = debts.Where(d => d.DebtStatus == "Cleared").ToList();

        await GenerateBarChartData(transactions);
    }



    private async Task GenerateBarChartData(List<FineTrack.Database.Transaction> transactions)
    {
        var monthlyIncome = new double[3];
        var monthlyExpense = new double[3];

        foreach (var transaction in transactions)
        {
            var month = transaction.TransactionDate.Month;
            if (month >= 11 || month <= 1)
            {
                int monthIndex = (month == 11) ? 0 : (month == 12 ? 1 : 2);

                if (transaction.TransactionType == "Income")
                {
                    monthlyIncome[monthIndex] += (double)transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Expense")
                {
                    monthlyExpense[monthIndex] += (double)transaction.TransactionAmount;
                }
            }
        }

        BarChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Income", Data = monthlyIncome},
            new ChartSeries { Name = "Expense", Data = monthlyExpense }
        };
    }

    private RenderFragment RenderTable<T>(List<T> items) => builder =>
    {
        if (items == null || !items.Any())
        {
            builder.AddContent(0, "No data available.");
            return;
        }

        builder.OpenElement(0, "table");
        builder.OpenElement(1, "thead");
        builder.OpenElement(2, "tr");
        foreach (var prop in typeof(T).GetProperties())
        {
            builder.OpenElement(3, "th");
            builder.AddContent(4, prop.Name);
            builder.CloseElement();
        }
        builder.CloseElement();
        builder.CloseElement();

        builder.OpenElement(5, "tbody");
        foreach (var item in items)
        {
            builder.OpenElement(6, "tr");
            foreach (var prop in typeof(T).GetProperties())
            {
                builder.OpenElement(7, "td");
                builder.AddContent(8, prop.GetValue(item)?.ToString() ?? "");
                builder.CloseElement();
            }
            builder.CloseElement();
        }
        builder.CloseElement();

        builder.CloseElement();
    };
}
