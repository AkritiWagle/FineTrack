@page "/"
@inject FineTrack.Services.BalanceService BalanceService
@inject FineTrack.Database.ApplicationDbContext DbContext

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .chart-container {
        height: 250px;
        overflow-x: auto;
    }

    .chart-label {
        font-size: 14px;
        color: black;
        white-space: nowrap;
    }

    .chart-legend {
        display: flex;
        justify-content: space-around;
        margin-top: 10px;
    }

    .chart-legend-item {
        display: flex;
        align-items: center;
        font-size: 14px;
        white-space: nowrap;
    }

    .chart-legend-box {
        width: 16px;
        height: 16px;
        margin-right: 5px;
    }

    table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f4f4f4;
    }
</style>

<div class="container mt-4">
    <h3 style="color:green">Available Balance: @BalanceService.AvailableBalance</h3>

    <div class="row">
        <div class="col-md-2">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h4>@BalanceService.TotalInflows</h4>
            </div>
        </div>
        <div class="col-md-2">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h4>@BalanceService.TotalOutflows</h4>
            </div>
        </div>
        <div class="col-md-2">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h4>@BalanceService.TotalDebt</h4>
            </div>
        </div>
        <div class="col-md-2">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Pending Debt</h5>
                <h4>@BalanceService.TotalPendingDebt</h4>
            </div>
        </div>
        <div class="col-md-2">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Cleared Debt</h5>
                <h4>@BalanceService.TotalClearedDebt</h4>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Income vs Expense</h5>
                <div class="chart-container">
                    <MudPaper Class="pa-4">
                        <MudChart ChartType="ChartType.Bar"
                                  ChartSeries="@BarChartSeries"
                                  XAxisLabels="@BarChartLabels"
                                  Width="100%"
                                  Height="250px" />
                    </MudPaper>
                    <div class="chart-legend">
                        <div class="chart-legend-item">
                            <div class="chart-legend-box" style="background-color: green;"></div>
                            Income
                        </div>
                        <div class="chart-legend-item">
                            <div class="chart-legend-box" style="background-color: red;"></div>
                            Expense
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <h3>Top Highest Inflows</h3>
    @RenderTable(HighestInflows)

    <h3>Top Lowest Inflows</h3>
    @RenderTable(LowestInflows)

    <h3>Top Highest Outflows</h3>
    @RenderTable(HighestOutflows)

    <h3>Top Lowest Outflows</h3>
    @RenderTable(LowestOutflows)

    <h3>Top Highest Debts</h3>
    @RenderTable(HighestDebts)

    <h3>Top Lowest Debts</h3>
    @RenderTable(LowestDebts)
</div>

@code {
    private List<FineTrack.Database.Transaction> HighestInflows = new();
    private List<FineTrack.Database.Transaction> LowestInflows = new();
    private List<FineTrack.Database.Transaction> HighestOutflows = new();
    private List<FineTrack.Database.Transaction> LowestOutflows = new();
    private List<FineTrack.Database.Debt> HighestDebts = new();
    private List<FineTrack.Database.Debt> LowestDebts = new();

    public List<ChartSeries> BarChartSeries = new List<ChartSeries>();
    public string[] BarChartLabels = { "Nov", "Dec", "Jan" }; // Example for three months

    protected override async Task OnInitializedAsync()
    {
        await BalanceService.UpdateAvailableBalanceAsync();
        await BalanceService.UpdateTransactionCategoriesAsync();

        // Fetch and process transactions
        var transactions = await DbContext.Transactions.ToListAsync();
        var debts = await DbContext.Debts.ToListAsync();

        // Filter top 3 highest and lowest inflows
        HighestInflows = transactions
            .Where(t => t.TransactionType == "Income")
            .OrderByDescending(t => t.TransactionAmount)
            .Take(3)
            .ToList();

        LowestInflows = transactions
            .Where(t => t.TransactionType == "Income")
            .OrderBy(t => t.TransactionAmount)
            .Take(3)
            .ToList();

        // Filter top 3 highest and lowest outflows
        HighestOutflows = transactions
            .Where(t => t.TransactionType == "Expense")
            .OrderByDescending(t => t.TransactionAmount)
            .Take(3)
            .ToList();

        LowestOutflows = transactions
            .Where(t => t.TransactionType == "Expense")
            .OrderBy(t => t.TransactionAmount)
            .Take(3)
            .ToList();

        // Filter top 3 highest and lowest debts
        HighestDebts = debts
            .OrderByDescending(d => d.DebtAmount)
            .Take(3)
            .ToList();

        LowestDebts = debts
            .OrderBy(d => d.DebtAmount)
            .Take(3)
            .ToList();

        await GenerateBarChartData(transactions);
    }

    private async Task GenerateBarChartData(List<FineTrack.Database.Transaction> transactions)
    {
        var monthlyIncome = new double[3];
        var monthlyExpense = new double[3];

        foreach (var transaction in transactions)
        {
            var month = transaction.TransactionDate.Month; // Adjust dynamically for three months
            if (month >= 11 || month <= 1) // Assuming Nov, Dec, Jan for example
            {
                int monthIndex = (month == 11) ? 0 : (month == 12 ? 1 : 2);

                if (transaction.TransactionType == "Income")
                {
                    monthlyIncome[monthIndex] += (double)transaction.TransactionAmount;
                }
                else if (transaction.TransactionType == "Expense")
                {
                    monthlyExpense[monthIndex] += (double)transaction.TransactionAmount;
                }
            }
        }

        BarChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "", Data = monthlyIncome},
            new ChartSeries { Name = "", Data = monthlyExpense }
        };
    }

    private RenderFragment RenderTable<T>(List<T> items) => builder =>
    {
        if (items == null || !items.Any())
        {
            builder.AddContent(0, "No data available.");
            return;
        }

        builder.OpenElement(0, "table");
        builder.OpenElement(1, "thead");
        builder.OpenElement(2, "tr");
        foreach (var prop in typeof(T).GetProperties())
        {
            builder.OpenElement(3, "th");
            builder.AddContent(4, prop.Name);
            builder.CloseElement();
        }
        builder.CloseElement();
        builder.CloseElement();

        builder.OpenElement(5, "tbody");
        foreach (var item in items)
        {
            builder.OpenElement(6, "tr");
            foreach (var prop in typeof(T).GetProperties())
            {
                builder.OpenElement(7, "td");
                builder.AddContent(8, prop.GetValue(item)?.ToString() ?? "");
                builder.CloseElement();
            }
            builder.CloseElement();
        }
        builder.CloseElement();

        builder.CloseElement();
    };
}
