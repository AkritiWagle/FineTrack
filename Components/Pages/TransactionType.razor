@page "/TransactionType"
@using FineTrack.Database
@inject ApplicationDbContext DbContext
@inject FineTrack.Services.BalanceService BalanceService

<h3 class="text-center">Manage Custom Transaction Categories</h3>

<div class="container my-4">
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="transactionType" class="form-label">Type:</label>
            <select id="transactionType" class="form-select" value="@selectedType" @onchange="OnTypeChanged">
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="newCategory" class="form-label">Category Name:</label>
            <input type="text" id="newCategory" class="form-control" @bind="newCategory" placeholder="Enter Category Name" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="AddCategory">Add</button>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>S.N.</th>
                <th>Category</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (categories?.Any() == true)
            {
                int sn = 1;
                foreach (var category in categories)
                {
                    <tr>
                        <td>@sn</td>
                        <td>@category.TransactionCategory</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveCategory(category)">Remove</button>
                        </td>
                    </tr>
                    sn++;
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center">No categories available.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private string selectedType = "Income";
    private string newCategory = string.Empty;
    private string errorMessage = string.Empty; // To store the error message
    private List<TransactionCategoryTable> categories = new List<TransactionCategoryTable>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        errorMessage = "";
        categories = DbContext.GetTableRows<TransactionCategoryTable>("TransactionCategoryTable")
            .Where(c => c.TypeOfTransaction == selectedType)
            .ToList();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory))
        {
            var category = new TransactionCategoryTable
                {
                    TypeOfTransaction = selectedType,
                    TransactionCategory = newCategory
                };

            await DbContext.CreateAsync(category);
            newCategory = string.Empty;
            await LoadCategories();
            await BalanceService.UpdateTransactionCategoriesAsync();
        }
        else
        {
            errorMessage = "Please enter a proper category.";
            return;
        }
    }

    private async Task RemoveCategory(TransactionCategoryTable category)
    {
        await DbContext.DeleteAsync(category);
        await LoadCategories();
        await BalanceService.UpdateTransactionCategoriesAsync();
    }

    private async Task OnTypeChanged(ChangeEventArgs e)
    {
        selectedType = e.Value.ToString();
        await LoadCategories();
    }
}
