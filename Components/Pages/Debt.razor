@page "/Debt"
@inject FineTrack.Database.ApplicationDbContext DbContext
@inject FineTrack.Services.BalanceService BalanceService

<h3>Debts</h3>
<p>Total Debt Transactions: @BalanceService.DebtTransactionCount</p>
<p>Available Balance: @BalanceService.AvailableBalance.ToString("C")</p>

@if (Debts == null)
{
        <p>Loading...</p>
}
else if (Debts.Count == 0)
{
        <p>No Debts records.</p>
}
else
{
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Select</th>
                    <th>ID</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>
                        Due Date
                        <button class="btn btn-link btn-sm" @onclick="ToggleSortByDueDate">
                        @((isSortingByDueDateAscending ? "↑" : "↓"))
                        </button>
                    </th>
                    <th>Source</th>
                    <th>
                        Debt Date
                        <button class="btn btn-link btn-sm" @onclick="ToggleSortByDebtDate">
                        @((isSortingByDebtDateAscending ? "↑" : "↓"))
                        </button>
                    </th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var debt in Debts)
            {
                    <tr>
                        <td>
                            <input type="radio" name="selectedDebt" @onclick="() => SelectDebt(debt)" />
                        </td>
                        <td>@debt.DebtId</td>
                        <td>@debt.DebtAmount.ToString("C")</td>
                        <td>@debt.DebtCategory</td>
                        <td>@debt.DebtStatus</td>
                        <td>@debt.DebtDueDate.ToString("yyyy-MM-dd")</td>
                        <td>@debt.DebtSource</td>
                        <td>@debt.DebtDate.ToString("yyyy-MM-dd")</td>
                        <td>@debt.DebtRemarks</td>
                    </tr>
            }
            </tbody>
        </table>
}

<button class="btn btn-primary" @onclick="ClearSelectedDebt" disabled="@(selectedDebt == null || selectedDebt.DebtStatus != "Pending")">
    Clear Selected Debt
</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
        <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private List<FineTrack.Database.Debt> Debts;
    private bool isSortingByDueDateAscending = true;
    private bool isSortingByDebtDateAscending = true;
    private FineTrack.Database.Debt selectedDebt; // Holds the currently selected debt
    private string errorMessage; // Holds any error messages

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Debts = await DbContext.ReadAllDebtAsync();
            SortByDebtDate(); // Default sorting by DebtDate ascending
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Debts: {ex.Message}");
            Debts = new List<FineTrack.Database.Debt>();
        }
    }

    private void ToggleSortByDueDate()
    {
        isSortingByDueDateAscending = !isSortingByDueDateAscending;
        SortByDueDate();
    }

    private void SortByDueDate()
    {
        if (isSortingByDueDateAscending)
        {
            Debts = Debts.OrderBy(d => d.DebtDueDate).ToList();
        }
        else
        {
            Debts = Debts.OrderByDescending(d => d.DebtDueDate).ToList();
        }
    }

    private void ToggleSortByDebtDate()
    {
        isSortingByDebtDateAscending = !isSortingByDebtDateAscending;
        SortByDebtDate();
    }

    private void SortByDebtDate()
    {
        if (isSortingByDebtDateAscending)
        {
            Debts = Debts.OrderBy(d => d.DebtDate).ToList();
        }
        else
        {
            Debts = Debts.OrderByDescending(d => d.DebtDate).ToList();
        }
    }

    private void SelectDebt(FineTrack.Database.Debt debt)
    {
        selectedDebt = debt;
        errorMessage = string.Empty; // Clear any previous error messages
    }

    private async Task ClearSelectedDebt()
    {
        if (selectedDebt == null || selectedDebt.DebtStatus != "Pending")
        {
            errorMessage = "No pending debt selected.";
            return;
        }

        if (selectedDebt.DebtAmount > BalanceService.AvailableBalance)
        {
            errorMessage = "Insufficient balance to clear the debt.";
            return;
        }

        // Update the debt status to "Cleared"
        selectedDebt.DebtStatus = "Cleared";

        try
        {
            await DbContext.UpdateAsync(selectedDebt); // Update the database
            await BalanceService.UpdateAvailableBalanceAsync();
            errorMessage = string.Empty; // Clear error message
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to clear the debt: {ex.Message}";
        }
    }
}
