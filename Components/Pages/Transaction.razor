@page "/Transaction"
@inject FineTrack.Services.UserSessionService UserSessionService

@inject FineTrack.Database.ApplicationDbContext DbContext
@inject FineTrack.Services.BalanceService BalanceService

<h3>Transactions</h3>
<p>Total Inflow/Outflow Transactions: @BalanceService.TransactionCount</p>

<div class="filters mb-4">
    <h5>Filters</h5>
    <div class="d-flex align-items-end">
        <div class="form-group mr-3">
            <label for="transactionType">Transaction Type:</label>
            <select id="transactionType" class="form-control" @bind="filterTransactionType">
                <option value="">-- All --</option>
                @foreach (var type in transactionTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
        <div class="form-group mr-3">
            <label for="category">Category:</label>
            <select id="category" class="form-control" @bind="filterCategory">
                <option value="">-- All --</option>
                @foreach (var category in transactionCategories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="form-group mr-3">
            <label for="startDate">Start Date:</label>
            <input id="startDate" type="date" @bind="filterStartDate" class="form-control" />
        </div>
        <div class="form-group mr-3">
            <label for="endDate">End Date:</label>
            <input id="endDate" type="date" @bind="filterEndDate" class="form-control" />
        </div>

        <div class="form-group mr-3">
            <label for="title">Title:</label>
            <input id="title" type="input" @bind="filterTitle" class="form-control" />
        </div>

        <div>
            <button class="btn btn-primary mr-2" @onclick="ApplyFiltersAndSort">Apply Filters</button>
            <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
        </div>
    </div>
</div>

@if (filteredTransactions == null)
{
    <p>Loading...</p>
}
else if (filteredTransactions.Count == 0)
{
    <p>No transactions found.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>TransactionID</th>
                <th>Title</th>
                <th>Transaction Type</th>
                <th>
                    Amount
                    <button class="btn btn-link btn-sm" @onclick="ToggleAmountSortOrder">
                        @((isAmountSortAscending ? "↑" : "↓"))
                    </button>
                </th>
                <th>Category</th>
                <th>
                    Transaction Date
                    <button class="btn btn-link btn-sm" @onclick="ToggleDateSortOrder">
                        @((isDateSortAscending ? "↑" : "↓"))
                    </button>
                </th>
                <th>Remarks</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr>
                    <td>@transaction.TransactionId</td>
                    <td>@transaction.TransactionTitle</td>
                    <td>@transaction.TransactionType</td>
                    <td>@transaction.TransactionAmount.ToString("C")</td>
                    <td>@transaction.TransactionSource</td>
                    <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>
                    <td>@transaction.Remarks</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FineTrack.Database.Transaction> transactions;
    private List<FineTrack.Database.Transaction> allTransactions;
    private List<FineTrack.Database.Transaction> filteredTransactions;

    private List<string> transactionTypes = new List<string>();
    private List<string> transactionCategories = new List<string>();

    private string filterTransactionType;
    private string filterCategory;
    private string filterTitle;

    private DateTime? filterStartDate;
    private DateTime? filterEndDate;

    private bool isDateSortAscending = true;
    private bool isAmountSortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allTransactions = await DbContext.ReadAllAsync();
            transactions = allTransactions.Where(t => t.UserId == UserSessionService.CurrentUser.UserId).ToList();
            filteredTransactions = transactions; // Initialize filtered list

            // Populate dropdowns
            transactionTypes = transactions
                .Where(t => !string.IsNullOrEmpty(t.TransactionType))
                .Select(t => t.TransactionType)
                .Distinct()
                .ToList();

            transactionCategories = transactions
                .Where(t => !string.IsNullOrEmpty(t.TransactionSource))
                .Select(t => t.TransactionSource)
                .Distinct()
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
            transactions = new List<FineTrack.Database.Transaction>();
            filteredTransactions = new List<FineTrack.Database.Transaction>();
        }
    }

    private void ApplyFiltersAndSort()
    {
        // Apply Filters
        filteredTransactions = transactions
            .Where(t => string.IsNullOrEmpty(filterTransactionType) ||
                        (!string.IsNullOrEmpty(t.TransactionType) &&
                         t.TransactionType.Equals(filterTransactionType, StringComparison.OrdinalIgnoreCase)))
            .Where(t => string.IsNullOrEmpty(filterCategory) ||
                        (!string.IsNullOrEmpty(t.TransactionSource) &&
                         t.TransactionSource.Contains(filterCategory, StringComparison.OrdinalIgnoreCase)))
            .Where(t => string.IsNullOrEmpty(filterTitle) ||
                    (!string.IsNullOrEmpty(t.TransactionTitle) &&
                     t.TransactionTitle.Contains(filterTitle, StringComparison.OrdinalIgnoreCase))) // Fixed Title Filtering
            .Where(t => !filterStartDate.HasValue || t.TransactionDate >= filterStartDate.Value)
            .Where(t => !filterEndDate.HasValue || t.TransactionDate <= filterEndDate.Value)
            .ToList();

        // Apply Sorting
        SortTransactionsByDate(); // Default sorting
    }

    private void ClearFilters()
    {
        // Reset filters
        filterTransactionType = string.Empty;
        filterCategory = string.Empty;
        filterStartDate = null;
        filterEndDate = null;

        // Reset filtered list to all transactions
        filteredTransactions = transactions;
    }

    private void ToggleDateSortOrder()
    {
        isDateSortAscending = !isDateSortAscending; // Toggle sorting order
        SortTransactionsByDate();
    }

    private void ToggleAmountSortOrder()
    {
        isAmountSortAscending = !isAmountSortAscending; // Toggle sorting order
        SortTransactionsByAmount();
    }

    private void SortTransactionsByDate()
    {
        if (isDateSortAscending)
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.TransactionDate).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.TransactionDate).ToList();
        }
    }

    private void SortTransactionsByAmount()
    {
        if (isAmountSortAscending)
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.TransactionAmount).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.TransactionAmount).ToList();
        }
    }
}
