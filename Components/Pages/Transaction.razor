@page "/Transaction"

@inject FineTrack.Database.ApplicationDbContext DbContext
@inject FineTrack.Services.BalanceService BalanceService

<h3>Transactions</h3>
<p>Total Inflow/Outflow Transactions: @BalanceService.TransactionCount</p>

<!-- Filter Section -->
<div class="mb-3">
    <h5>Filter Transactions</h5>
    <div class="row">
        <div class="col-md-3">
            <label for="transactionType" class="form-label">Transaction Type</label>
            <select id="transactionType" class="form-select" @bind="filterTransactionType">
                <option value="">-- Select --</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="category" class="form-label">Category</label>
            <input type="text" id="category" class="form-control" @bind="filterCategory" placeholder="Enter category" />
        </div>
        <div class="col-md-3">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" id="startDate" class="form-control" @bind="filterStartDate" />
        </div>
        <div class="col-md-3">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" id="endDate" class="form-control" @bind="filterEndDate" />
        </div>
    </div>
    <button class="btn btn-primary mt-3" @onclick="ApplyFilters">Apply Filters</button>
    <button class="btn btn-secondary mt-3 ms-2" @onclick="ClearFilters">Clear Filters</button>
</div>

@if (filteredTransactions == null)
{
        <p>Loading...</p>
}
else if (filteredTransactions.Count == 0)
{
        <p>No transactions found based on the applied filters.</p>
}
else
{
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>TransactionID</th>
                    <th>Transaction Type</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Transaction Date</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.TransactionType</td>
                        <td>@transaction.TransactionAmount.ToString("C")</td>
                        <td>@transaction.TransactionSource</td>
                        <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>
                        <td>@transaction.Remarks</td>
                    </tr>
            }
            </tbody>
        </table>
}

@code {
    private List<FineTrack.Database.Transaction> transactions;
    private List<FineTrack.Database.Transaction> filteredTransactions;

    // Filter Criteria
    private string filterTransactionType = string.Empty;
    private string filterCategory = string.Empty;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactions = await DbContext.ReadAllAsync();
            filteredTransactions = new List<FineTrack.Database.Transaction>(transactions); // Initialize filtered list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
            transactions = new List<FineTrack.Database.Transaction>();
            filteredTransactions = new List<FineTrack.Database.Transaction>();
        }
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
            .Where(t => string.IsNullOrEmpty(filterTransactionType) ||
                        (!string.IsNullOrEmpty(t.TransactionType) &&
                         t.TransactionType.Equals(filterTransactionType, StringComparison.OrdinalIgnoreCase)))
            .Where(t => string.IsNullOrEmpty(filterCategory) ||
                        (!string.IsNullOrEmpty(t.TransactionSource) &&
                         t.TransactionSource.Contains(filterCategory, StringComparison.OrdinalIgnoreCase)))
            .Where(t => !filterStartDate.HasValue || t.TransactionDate >= filterStartDate.Value)
            .Where(t => !filterEndDate.HasValue || t.TransactionDate <= filterEndDate.Value)
            .ToList();
    }

    private void ClearFilters()
    {
        filterTransactionType = string.Empty;
        filterCategory = string.Empty;
        filterStartDate = null;
        filterEndDate = null;
        filteredTransactions = new List<FineTrack.Database.Transaction>(transactions); // Reset to original list
    }
}
